import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id("application-conventions")
    id("org.sonarqube") version "3.3"
}

group = "com.cogoport.ares.api"
version = "1.0.0"

repositories {
    maven {
        url = uri("https://maven.pkg.github.com/cogoport/brahma")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }

    maven {
        url = uri("https://maven.pkg.github.com/cogoport/plutus")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }

    maven {
        url = uri("https://maven.pkg.github.com/cogoport/loki")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }

    maven {
        url = uri("https://maven.pkg.github.com/cogoport/hades")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }

    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }

    maven {
        url = uri("https://maven.pkg.github.com/cogoport/kuber")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        }
    }

    maven { url "https://s01.oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    kapt("io.micronaut:micronaut-http-validation")
    kapt("io.micronaut.data:micronaut-data-processor")
    kapt("io.micronaut.openapi:micronaut-openapi")
    kapt("org.mapstruct:mapstruct-processor:1.5.0.RC1")

    implementation("io.micronaut:micronaut-runtime")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut.rabbitmq:micronaut-rabbitmq:3.4.0")
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1")
    implementation("jakarta.persistence:jakarta.persistence-api:2.2.3")
    implementation("org.mapstruct:mapstruct:1.5.0.RC1")
    implementation("io.micronaut.tracing:micronaut-tracing-zipkin")
    implementation("io.zipkin.aws:zipkin-reporter-xray-udp:0.23.4")
    implementation("com.cogoport.brahma.hashids:hashid:0.1.0")
    implementation("com.cogoport.brahma.sage:sage-client:1.5.7")
    implementation("com.cogoport.brahma.authentication:authentication:1.0.8")
    implementation("com.cogoport.brahma.opensearch:client:0.1.4-beta")
    implementation("org.json:json:20220320")

    //Loki Model
    implementation("com.cogoport.loki:loki-model:0.1.45")

    //Plutus Client
    implementation("com.cogoport.plutus:plutus-model:0.1.23.3-beta")
    implementation("com.cogoport.plutus:plutus-client:0.1.14.7")

    //Hades Client & Model
    implementation("com.cogoport.hades:hades-client:0.1.4.3")
    implementation("com.cogoport.hades:hades-model:0.1.6-beta")

    //Kuber Client
    implementation("com.cogoport.kuber:kuber-model:1.1.4")
    implementation("com.cogoport.kuber:kuber-client:1.1.2")

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.13.3")
    implementation("software.amazon.msk:aws-msk-iam-auth:1.1.4")
    implementation("org.apache.commons:commons-csv:1.9.0")
    implementation("com.cogoport.brahma.aws:s3:0.1.1")
    implementation("com.cogoport.brahma.excel:engine:0.1.6")
    // Import model subproject
    implementation(project(":model"))

    //Database
    implementation('io.micronaut.sql:micronaut-jdbc-hikari:4.3.0')
    implementation("io.r2dbc:r2dbc-postgresql:0.8.12.RELEASE")
    runtimeOnly("org.postgresql:postgresql")
    implementation("io.micronaut.data:micronaut-data-r2dbc:3.5.0")

    // AWS X-ray, Distributed tracing and logging
    runtimeOnly("io.zipkin.brave:brave-instrumentation-http:5.13.9")
    implementation("io.zipkin.aws:zipkin-reporter-xray-udp:0.23.4")
    implementation("io.zipkin.aws:brave-propagation-aws:0.23.4")
    implementation("io.opentracing.brave:brave-opentracing:1.0.0")
    implementation("io.zipkin.brave:brave-context-slf4j:5.13.9")

    //Service Discovery
    implementation('software.amazon.awssdk:servicediscovery:2.17.191')
    implementation("io.micronaut.aws:micronaut-aws-service-discovery:3.4.0")
    implementation("io.sentry:sentry:6.4.0")

    implementation("software.amazon.msk:aws-msk-iam-auth:1.1.4")


    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin")

    compileOnly("org.graalvm.nativeimage:svm")
    compileOnly("org.opensearch.client:opensearch-java:1.0.0")

    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.1")

    // Tracing instrumentation libraries
    implementation("io.micronaut:micronaut-tracing:3.3.0-M1")
    runtimeOnly("io.jaegertracing:jaeger-thrift:1.8.1")
    implementation("io.micronaut.tracing:micronaut-tracing-core:4.5.0")
}

tasks.named("optimizedDockerBuildNative") {
    images = ["ghcr.io/cogoport/ares:latest"]
}

sonarqube {
    properties {
        property("sonar.projectKey", "Ares")
        property("sonar.projectName", "Ares")
    }
}

tasks.named("jar") {
    archiveFileName.set("app.jar")
}

application {
    mainClass.set("com.cogoport.ares.api.ApplicationKt")
}

tasks.withType(ShadowJar) {
    setZip64(true)
}


graalvmNative.toolchainDetection = false

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("com.cogoport.ares.api.*")
    }
    aot {
        optimizeServiceLoading = true
        convertYamlToJava = true
        precomputeOperations = true
        cacheEnvironment = true
        optimizeClassLoading = true
        deduceEnvironment = true
    }
}
