name: Tests
on:
  pull_request:

permissions:
  contents: read
  packages: write
  issues: read
  checks: write
  pull-requests: write

env:
  POSTGRES_USER: cogoport
  POSTGRES_PASSWORD: cogoport123
  POSTGRES_DB: ares
  MICRONAUT_ENVIRONMENT: "test"
  OPENSEARCH_HOST: localhost
  OPENSEARCH_PORT: 9200
  OPENSEARCH_USER: admin
  OPENSEARCH_PASS: admin
  OPENSEARCH_SCHEME: http
  AWS_REGION: ap-south-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  integration-tests:
    name: Run Integration Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14.2-alpine3.15
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

      opensearch:
        image: opensearchproject/opensearch:2.2.1
        options: >-
          --health-cmd "curl -XGET http://localhost:9200 -u 'admin:admin'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 8
        ports:
          - 9200:9200
        env:
          cluster.name: opensearch-cluster
          node.name: opensearch-node
          bootstrap.memory_lock: true
          OPENSEARCH_JAVA_OPTS: "-Xms512m -Xmx512m"
          DISABLE_INSTALL_DEMO_CONFIG: true
          DISABLE_SECURITY_PLUGIN: true
          discovery.type: single-node

      rabbitmq:
        image: rabbitmq:3.11-management
        ports:
          - '5672:5672'
          - '15672:15672'
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmqctl node_health_check"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        # Docker Hub image
        image: redis:6.0
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@master
        with:
          fetch-depth: 1

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          cache: 'gradle'

      - name: Run tests with code coverage
        run: ./gradlew flywayMigrate jacocoTestReport --no-daemon
        env:
          GITHUB_USERNAME: cogoport-dev
          GITHUB_TOKEN: ${{ secrets.COGOPORT_DEV_ADMIN_TOKEN }}

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          junit_files: |
            ./api/build/test-results/**/*.xml
            ./model/build/test-results/**/*.xml
            ./client/build/test-results/**/*.xml

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.2
        with:
          paths: ${{ github.workspace }}/api/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          #          Uncomment when code coverage needs to be enabled as a PR check
          min-coverage-overall: 8
          min-coverage-changed-files: 40

      - name: Save Coverage To Environment Variable
        run: |
          echo "TOTAL_COVERAGE=${{ steps.jacoco.outputs.coverage-overall }}" >> $GITHUB_ENV
          echo "CHANGED_FILES_COVERAGE=${{ steps.jacoco.outputs.coverage-changed-files }}" >> $GITHUB_ENV

      - name: Coverage-check
        run: |
          import os
          import sys
          print("Total Coverage: " + str(os.environ["TOTAL_COVERAGE"]))
          if float(os.environ["TOTAL_COVERAGE"]) < 8 or float(os.environ["CHANGED_FILES_COVERAGE"]) < 40:
            print("Insufficient Coverage!")
            sys.exit(-1) # Cause Status Check Failure due to noncompliant coverage
          sys.exit(0)
        shell: python