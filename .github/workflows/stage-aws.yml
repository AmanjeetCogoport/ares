name: Deploy to Amazon ECS - Staging

on:
  push:
    branches:
      - staging

env:
  REPO_URL: 598045728665.dkr.ecr.ap-south-1.amazonaws.com/ares     # set this to your GitHub package url
  AWS_REGION: ap-south-1              # set this to your preferred AWS region, e.g. us-west-1
  ECS_SERVICE: ares                   # set this to your Amazon ECS service name
  ECS_CLUSTER: CogoportEcsCluster     # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: AresTaskDefinition       # set this to your task definition name
  CONTAINER_NAME: ares                # set this to the name of the container in the containerDefinitions section of your task definition
  MICRONAUT_ENVIRONMENTS: staging
  GITHUB_USERNAME: cogoport-dev
  GITHUB_TOKEN: ${{ secrets.RW_PACKAGE_TOKEN_COGOPORT_DEV }}
  DB_URL: ${{ secrets.STAGE_DB_URL }}
  DB_USER: ${{ secrets.STAGE_DB_USER }}
  DB_PASS: ${{ secrets.STAGE_DB_PASS }}

permissions:
  contents: read

jobs:
  deploy_staging:
    name: Start deployment
    runs-on: cogo-action-runner
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECS_DEPLOY_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECS_DEPLOY_AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate docker image name
        id: image_name
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build jar file
        run: ./gradlew build -x test

      - name: Migrate DB schema
        run: ./scripts/migrate-db.sh

      - name: Build and Push image to  ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ steps.image_name.outputs.sha_short }}
        run: |
          echo $IMAGE_TAG
          docker build -t ${{ env.REPO_URL }}:$IMAGE_TAG -t ${{ env.REPO_URL }}:latest-stage .
          docker push ${{ env.REPO_URL }}:$IMAGE_TAG
          docker push ${{ env.REPO_URL }}:latest-stage

      - name: Download task definition json
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.REPO_URL }}:${{ steps.image_name.outputs.sha_short }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false