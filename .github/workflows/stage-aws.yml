name: Deploy to Amazon ECS - Staging

on:
  push:
    branches:
      - staging

env:
  REGISTRY: ghcr.io
  REPO_URL: ghcr.io/cogoport/ares     # set this to your GitHub package url
  GH_CR_USER: cogoport-dev            # set this to your GitHub username
  AWS_REGION: ap-south-1              # set this to your preferred AWS region, e.g. us-west-1
  ECS_SERVICE: ares-service           # set this to your Amazon ECS service name
  ECS_CLUSTER: cogoport               # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ares-td        # set this to your task definition name
  CONTAINER_NAME: ares                # set this to the name of the container in the containerDefinitions section of your task definition
  MICRONAUT_ENVIRONMENTS: staging
  GITHUB_USERNAME: $GH_CR_USER
  GITHUB_TOKEN: ${{ secrets.RW_PACKAGE_TOKEN_COGOPORT_DEV }}
  DB_URL: ${{ secrets.STAGE_DB_URL }}
  DB_USER: ${{ secrets.STAGE_DB_USER }}
  DB_PASS: ${{ secrets.STAGE_DB_PASS }}

permissions:
  contents: read

jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    environment: staging
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_TOKEN }}
          ec2-image-id: ami-07793eef0fa960ccd
          ec2-instance-type: t3.2xlarge
          subnet-id: subnet-05f1c897b9994c200
          security-group-id: sg-01bf1ea2e2b45a7cf
  
  deploy_staging:
    name: Start deployment
    needs:
      - start-runner # required to get output from the start-runner job
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.GH_CR_USER }}
          password: ${{ secrets.RW_PACKAGE_TOKEN_COGOPORT_DEV }}

      - uses: graalvm/setup-graalvm@v1
        with:
          version: 'latest'
          java-version: '17'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate docker image name
        id: image_name
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Build jar file
        run: ./gradlew build -x test

      - name: Migrate DB schema
        run: ./scripts/migrate-db.sh

      - name: Build and Push image to Github CR
        id: build-image
        env:
          IMAGE_TAG: ${{ steps.image_name.outputs.sha_short }}
        run: |
          echo $IMAGE_TAG
          docker build -t ${{ env.REPO_URL }}:$IMAGE_TAG .
          docker push ${{ env.REPO_URL }}:$IMAGE_TAG

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECS_DEPLOY_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECS_DEPLOY_AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download task definition json
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.REPO_URL }}:${{ steps.image_name.outputs.sha_short }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false

  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - deploy_staging # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
